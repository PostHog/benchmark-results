{
    "benchmarks.QuerySuite.track_correlations_by_event_properties": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_correlations_by_event_properties(self):\n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"user signed up\"}, {\"id\": \"insight analyzed\"}],\n                **SHORT_DATE_RANGE,\n                \"funnel_correlation_type\": FunnelCorrelationType.EVENT_WITH_PROPERTIES,\n                \"funnel_correlation_event_names\": [\"$autocapture\"],\n            },\n            team=self.team,\n        )\n        with no_materialized_columns():\n            FunnelCorrelation(filter, self.team).run()\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_correlations_by_event_properties",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_correlations_by_event_properties_materialized": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_correlations_by_event_properties_materialized(self):\n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"user signed up\"}, {\"id\": \"insight analyzed\"}],\n                **SHORT_DATE_RANGE,\n                \"funnel_correlation_type\": FunnelCorrelationType.EVENT_WITH_PROPERTIES,\n                \"funnel_correlation_event_names\": [\"$autocapture\"],\n            },\n            team=self.team,\n        )\n        FunnelCorrelation(filter, self.team).run()\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_correlations_by_event_properties_materialized",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_correlations_by_events": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_correlations_by_events(self):\n        filter = Filter(\n            data={\"events\": [{\"id\": \"user signed up\"}, {\"id\": \"insight analyzed\"}], **SHORT_DATE_RANGE,}, team=self.team\n        )\n    \n        FunnelCorrelation(filter, self.team).run()\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_correlations_by_events",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_correlations_by_properties": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_correlations_by_properties(self):\n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"user signed up\"}, {\"id\": \"insight analyzed\"}],\n                **SHORT_DATE_RANGE,\n                \"funnel_correlation_type\": FunnelCorrelationType.PROPERTIES,\n                \"funnel_correlation_names\": [\"$browser\"],\n            },\n            team=self.team,\n        )\n        with no_materialized_columns():\n            FunnelCorrelation(filter, self.team).run()\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_correlations_by_properties",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_correlations_by_properties_materialized": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_correlations_by_properties_materialized(self):\n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"user signed up\"}, {\"id\": \"insight analyzed\"}],\n                **SHORT_DATE_RANGE,\n                \"funnel_correlation_type\": FunnelCorrelationType.PROPERTIES,\n                \"funnel_correlation_names\": [\"$browser\"],\n            },\n            team=self.team,\n        )\n        FunnelCorrelation(filter, self.team).run()\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_correlations_by_properties_materialized",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_trends_event_property_filter": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_event_property_filter(self):\n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"$pageview\"}],\n                \"properties\": [\n                    {\n                        \"key\": \"$host\",\n                        \"operator\": \"is_not\",\n                        \"value\": [\n                            \"localhost:8000\",\n                            \"localhost:5000\",\n                            \"127.0.0.1:8000\",\n                            \"127.0.0.1:3000\",\n                            \"localhost:3000\",\n                        ],\n                    }\n                ],\n                **SHORT_DATE_RANGE,\n            }\n        )\n    \n        with no_materialized_columns():\n            ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_trends_event_property_filter",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_trends_event_property_filter_materialized": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_event_property_filter_materialized(self):\n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"$pageview\"}],\n                \"properties\": [\n                    {\n                        \"key\": \"$host\",\n                        \"operator\": \"is_not\",\n                        \"value\": [\n                            \"localhost:8000\",\n                            \"localhost:5000\",\n                            \"127.0.0.1:8000\",\n                            \"127.0.0.1:3000\",\n                            \"localhost:3000\",\n                        ],\n                    }\n                ],\n                **DATE_RANGE,\n            }\n        )\n        ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_trends_event_property_filter_materialized",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_trends_filter_by_action_current_url": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_filter_by_action_current_url(self):\n        action = Action.objects.create(team=self.team, name=\"docs view\")\n        ActionStep.objects.create(\n            action=action, event=\"$pageview\", url=\"docs\", url_matching=\"contains\",\n        )\n    \n        filter = Filter(data={\"actions\": [{\"id\": action.id}], **DATE_RANGE}, team=self.team)\n        with no_materialized_columns():\n            ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_trends_filter_by_action_current_url",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_trends_filter_by_action_current_url_materialized": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_filter_by_action_current_url_materialized(self):\n        action = Action.objects.create(team=self.team, name=\"docs view\")\n        ActionStep.objects.create(\n            action=action, event=\"$pageview\", url=\"docs\", url_matching=\"contains\",\n        )\n    \n        filter = Filter(data={\"actions\": [{\"id\": action.id}], **DATE_RANGE}, team=self.team)\n        ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_trends_filter_by_action_current_url_materialized",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_trends_filter_by_action_with_person_filters": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_filter_by_action_with_person_filters(self):\n        action = Action.objects.create(team=self.team, name=\".com-users page views\")\n        ActionStep.objects.create(\n            action=action,\n            event=\"$pageview\",\n            properties=[{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}],\n        )\n    \n        filter = Filter(data={\"actions\": [{\"id\": action.id}], **DATE_RANGE}, team=self.team)\n        with no_materialized_columns():\n            ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_trends_filter_by_action_with_person_filters",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_trends_filter_by_action_with_person_filters_materialized": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_filter_by_action_with_person_filters_materialized(self):\n        action = Action.objects.create(team=self.team, name=\".com-users page views\")\n        ActionStep.objects.create(\n            action=action,\n            event=\"$pageview\",\n            properties=[{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}],\n        )\n    \n        filter = Filter(data={\"actions\": [{\"id\": action.id}], **DATE_RANGE}, team=self.team)\n        ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_trends_filter_by_action_with_person_filters_materialized",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_trends_filter_by_cohort": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_filter_by_cohort(self):\n        self.cohort.last_calculation = None\n        self.cohort.save()\n    \n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"$pageview\"}],\n                \"properties\": [{\"key\": \"id\", \"value\": self.cohort.pk, \"type\": \"cohort\"}],\n                **DATE_RANGE,\n            },\n            team=self.team,\n        )\n    \n        with no_materialized_columns():\n            ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_trends_filter_by_cohort",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_trends_filter_by_cohort_materialized": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_filter_by_cohort_materialized(self):\n        self.cohort.last_calculation = None\n        self.cohort.save()\n    \n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"$pageview\"}],\n                \"properties\": [{\"key\": \"id\", \"value\": self.cohort.pk, \"type\": \"cohort\"}],\n                **DATE_RANGE,\n            },\n            team=self.team,\n        )\n    \n        ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_trends_filter_by_cohort_materialized",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_trends_filter_by_cohort_precalculated": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_filter_by_cohort_precalculated(self):\n        self.cohort.last_calculation = now()\n        self.cohort.save()\n    \n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"$pageview\"}],\n                \"properties\": [{\"key\": \"id\", \"value\": self.cohort.pk, \"type\": \"cohort\"}],\n                **DATE_RANGE,\n            },\n            team=self.team,\n        )\n        ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_trends_filter_by_cohort_precalculated",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_trends_no_filter": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_no_filter(self):\n        filter = Filter(data={\"events\": [{\"id\": \"$pageview\"}], **DATE_RANGE})\n        ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_trends_no_filter",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_trends_person_property_filter": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_person_property_filter(self):\n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"$pageview\"}],\n                \"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}],\n                **DATE_RANGE,\n            }\n        )\n    \n        with no_materialized_columns():\n            ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_trends_person_property_filter",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "benchmarks.QuerySuite.track_trends_person_property_filter_materialized": {
        "code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_person_property_filter_materialized(self):\n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"$pageview\"}],\n                \"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}],\n                **DATE_RANGE,\n            }\n        )\n    \n        ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort",
        "name": "benchmarks.QuerySuite.track_trends_person_property_filter_materialized",
        "param_names": [],
        "params": [],
        "timeout": 3000.0,
        "type": "track",
        "unit": "unit",
        "version": "v001"
    },
    "version": 2
}