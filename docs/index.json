{"project": "posthog", "project_url": "https://posthog.com/", "show_commit_url": "https://github.com/PostHog/posthog/commit/", "hash_length": 40, "revision_to_hash": {"363": "ab887730b8715459d64689cb46c7dbc61c53c0ca", "369": "bec985146f054ef0f4ff1f4b1f961937a051dcdd", "371": "6b96634032f7dda7fcf9de29dbcf14f220e82949", "384": "3d3c9ac5cc442d315445383d3b811525024e15b7", "386": "8dc5b32b03ad15a2f615da5b5f0d773664f89cad", "389": "7dc01a4781fb05c99ad70894a9e025560ae23a61", "397": "afa156628a7823e764e2ae54d8875aa397d4cfaf", "487": "af41cc97e28534a9a105bede1f48093aee3e20d4", "529": "1e365a9514fa1203bc5b2932a8d3e56e252177b9", "543": "2007afaa6608adab201fe689684cfcd4d6844503", "546": "776f2fb3fe47a327d8eea83fd9a0e4dec3c9f48e", "581": "f393b1d4e11682e80c87cd2b327e7aa65f9592b1", "586": "ef30498c44735b864bea00c4d64a818150adaa16", "656": "1337c6cd8316c9e7cfa2363aed2e853d3f9a107d", "701": "ca0bd20227f6226fc6d2d3e596651c68169a11c8", "710": "d39659e70fa914dbbef10c7d5be70a3dd623f47a", "735": "a7a2996065169d8a145e75908409c0d3ef25398a", "818": "3376f7f4301fadb1cd5df8fbc5c67124b337f276", "871": "ee89d65142da5a221ed48d07570fc08bdce5cb8f", "876": "6ba060eb694bb5a6ded0912ce5d433431a2c3eee", "898": "c6cfd1d8c926056738621dfbaa05d44cf6ad2295", "930": "cdf6cb746932e62dcbecc98d90f4a134ec91468a", "952": "afc4db10b15bb280af7a2d28c6049ab236b21357", "973": "a4d1ad53ccdb77fc23af230b7c6ea54a15ad8174", "1003": "f723ee17b2207b499423d5ee04ef4cc42601fed1", "1039": "0d505f59a32238672331e4907d4bea069fcdc6fb", "1068": "c52157dc671735533f350d7839f00f4aee5b9e60", "1127": "1908d019f6ec627002c6e4bf2bc604464bb4804a", "1174": "09baf4bdf07d925b80ce7a1d433900f7442067a4", "1179": "5c562de2fdef53cad075212817293fc6fb3d6c7a", "1224": "247687a69dbbb37d4875482cdde32330da45581b", "1262": "fe6f875aaf63ae038e7d3874d8bd62ba3981fb2f", "1299": "d38b5a4b44d5b9c75ed45a4a5a61dab72fdb6ad8", "1316": "5175c9817d55d64168c15ea48ef4e1c33137b81d", "1403": "ac205964e7d3a6a2f0fcbb9062014d934a1fcb23", "1587": "9a4d42f4bca137e6e294c6576aef2f074100eccc", "1648": "7e2b17782b9e4e9828dc414f06a091207f395489", "1801": "29bd23ec4885fea58394f4382fc99f46514a7994", "1931": "78497b7b3d9e2496e4f01f2cedcb5a3de9eb76f1", "2072": "c5050da56414d845999867933a220bf2ea8410b9", "2268": "aa56aef0c82beb86832f81488bbf2c267992bd80", "2411": "bec5274f12f663355ab27a15f20d529ae2bf02c6", "2544": "da4395efd8d9e7c2c584897c9b6441439db072ab", "2732": "378562879601ae868a640dce3444e94f9afd632e", "2946": "941cfb386ca7435c4956a5681d388160614badea", "3004": "d18dc83a54ae90e0bec7b68ccdad67bd8854d54d", "3106": "cd0468e7bd47550f6e9d08613777d675a2794a12", "3129": "b3703691c4114289e6c7c0f6b4dc7aa667f15db7", "3439": "c701f31b02ee84bf03f2671208b365a69eec3085", "3818": "964f9ce79c07e2cd0f7c79542ed15ffad334d477", "3878": "33f53cfb577db9d3e078a645204a6c0aba442580", "4345": "cae19382625f6f84ac8aa879579e657530f73d03", "4813": "6b11dcf7b3cf1c5273329dac3e2821317dd545ec", "4877": "7eead50e028d6c9c29f62db8e374f4d506482d59", "4878": "775578a220d7e9316ca92a387b86ebce5ccc2053", "4913": "e245cfbd93972293ee01e35eab08ac3433244201", "4944": "92f5f9f831a088cc0fc9791ef93026a444ac3d30", "4978": "cd18cf88cd0f9997a688b5c83cf4171b2810a9cf", "5022": "336fd1670959b6c659ba672a5ab8d024690d9ce0", "5042": "8acb0e22423a2dd1639398ac51cbfe2ab9ccba77", "5100": "8305fb755d8cd7e9166ead85b6ba4fda7d75655d", "5194": "ce2f4462c9046c6990edc88dffa0cd4375f48584", "5244": "f34cc1ca0f576b6df4dee3e7af7380d12c17117a", "5430": "0df87579ab234102b3271ecaec14b67fde11644f", "5467": "c9d27d7983e383b1d6ba37efb734c60e04fddc6e", "5499": "e708d202c61bbc53dec9c3c871d92ac7604f1e52", "5546": "c27cfbfeff91bebbd96ff25a066646b7fb03d7c3", "5567": "e8055276053529d67ef86df61d5e7287943aabde", "5616": "906200196068b5dc2302cf90b3e2e34d8cea19e0", "5617": "89b0a1335b42d2738bcd2c954fcb0f4df6e93ed8", "5641": "2fb7cf80b5adee6805719002528ff72664988897", "5651": "ef70592603d316f20281cbe10d313d145c92736c", "5670": "b4540a8c191219420c5adeca499c8d78feb65dfc", "5705": "5810c8a61623f128a5963d89d655ae88ada8eb19", "5719": "cf6b6dd1e6b1f8cdbb91cde03effee1f018c88cc", "5728": "0720cf260afc3adda25c5cf6cc74114b5d3b0529", "5796": "0171732226a8151903f0a88323798acc835d2269", "5866": "25163d0bdbef22fb254cd10f0cd7afd6a3cdc346", "5890": "2af4622c09495e79e73ff6803191b91be84dfcbe", "5894": "0512972426b05d86da6b9a261f1e6059dfeb5587", "5916": "27edb933e486b3bfd4240bd54a3227b1717c5fff", "5938": "04045ff4669588e23f3a1c1a98409228bad34bcc", "6005": "e47ddf360736e8ef6d64aa801271d1e8d0b76130", "6035": "c0d7f1e17d0e67321aab96ad70f4dbd27a81a0bd", "6067": "80d90a7385bf7ae9d776b2d4e4e7e039a8de021d", "6091": "378ff2efc3751a30049c4437d02df6a028d29f72", "6147": "074d633c53c2d6437321d94a301b7efac7e3f6be", "6188": "39ff3abab204856b8fc4f11e82bfdf67859fa5f7", "6231": "a86fdeb895123b6bcac17e4ec1c5cbb379dfd79a", "6290": "9b54eb7c41f18ad470dc7237b6cb187a139b745d", "6318": "a957f0abb09423638bcc6024e64c349e9b2bc972", "6329": "0b4aaa19823b8e8be13fc41d3f8528fd82279b1e", "6349": "2cf73969a03d45e92de592026770d0ab2ee6bac1", "6399": "7b3defb90ea2eb54f9012b646c34b9ed9b7e234d", "6465": "44a00e171c06bad66c40b722a9e5b055babaef05", "6469": "1d46ff6c404c14b9ec1e41f259c07d905d7b44b9", "6545": "3c6a678b62ac685ff3ac10495ce8a3c150483a57", "6623": "6cbeb409fb7266bab6c0cf331f790d64e8f40c93"}, "revision_to_date": {"363": 1582700213000, "369": 1582754565000, "371": 1582754966000, "384": 1582844034000, "386": 1582846134000, "389": 1582850456000, "397": 1582922829000, "487": 1583880653000, "529": 1584257740000, "543": 1584459975000, "546": 1584487096000, "581": 1584554663000, "586": 1584563473000, "656": 1585155414000, "701": 1585752239000, "710": 1585782892000, "735": 1585924333000, "818": 1586354299000, "871": 1586972664000, "876": 1587030657000, "898": 1587572539000, "930": 1588175464000, "952": 1588782510000, "973": 1589395998000, "1003": 1589989941000, "1039": 1590601270000, "1068": 1591224009000, "1127": 1592509958000, "1174": 1593647794000, "1179": 1593720723000, "1224": 1594997529000, "1262": 1596046963000, "1299": 1596765573000, "1316": 1597330276000, "1403": 1599162872000, "1587": 1602767536000, "1648": 1603385465000, "1801": 1604491552000, "1931": 1605635059000, "2072": 1606757925000, "2268": 1608063515000, "2411": 1611086307000, "2544": 1612344451000, "2732": 1613591389000, "2946": 1614602623000, "3004": 1614801012000, "3106": 1616089494000, "3129": 1616425092000, "3439": 1618418126000, "3818": 1620638699000, "3878": 1620932086000, "4345": 1623759817000, "4813": 1626866852000, "4877": 1627324606000, "4878": 1627324606000, "4913": 1627671996000, "4944": 1628025577000, "4978": 1628464140000, "5022": 1628815519000, "5042": 1629186940000, "5100": 1629568451000, "5194": 1629927985000, "5244": 1630338814000, "5430": 1630768040000, "5467": 1631123435000, "5499": 1631516488000, "5546": 1631632948000, "5567": 1631689888000, "5616": 1631828810000, "5617": 1631863332000, "5641": 1632124249000, "5651": 1632224345000, "5670": 1632301963000, "5705": 1632400298000, "5719": 1632479994000, "5728": 1632736036000, "5796": 1632909878000, "5866": 1633196949000, "5890": 1633384361000, "5894": 1633425415000, "5916": 1633478286000, "5938": 1633553719000, "6005": 1633782569000, "6035": 1633998625000, "6067": 1634060482000, "6091": 1634162175000, "6147": 1634265707000, "6188": 1634513540000, "6231": 1634587525000, "6290": 1634698539000, "6318": 1634767322000, "6329": 1634827765000, "6349": 1634851187000, "6399": 1634945111000, "6465": 1635191100000, "6469": 1635199386000, "6545": 1635299068000, "6623": 1635371938000}, "params": {"machine": ["ci-benchmarks"], "python": ["3.8"], "arch": [null, "x86_64"], "cpu": ["Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz", null], "num_cpu": ["8", null], "os": ["Linux 5.4.0-81-generic", null], "ram": ["32530264", null], "branch": ["HEAD"]}, "graph_param_list": [{"machine": "ci-benchmarks", "python": "3.8", "branch": "HEAD", "arch": null, "cpu": null, "num_cpu": null, "os": null, "ram": null}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz", "machine": "ci-benchmarks", "num_cpu": "8", "os": "Linux 5.4.0-81-generic", "ram": "32530264", "python": "3.8", "branch": "HEAD"}], "benchmarks": {"benchmarks.QuerySuite.track_correlations_by_event_properties": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_correlations_by_event_properties(self):\n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"user signed up\"}, {\"id\": \"insight analyzed\"}],\n                **SHORT_DATE_RANGE,\n                \"funnel_correlation_type\": FunnelCorrelationType.EVENT_WITH_PROPERTIES,\n                \"funnel_correlation_event_names\": [\"$autocapture\"],\n            },\n            team=self.team,\n        )\n        with no_materialized_columns():\n            FunnelCorrelation(filter, self.team).run()\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_correlations_by_event_properties", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}, "benchmarks.QuerySuite.track_correlations_by_events": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_correlations_by_events(self):\n        filter = Filter(\n            data={\"events\": [{\"id\": \"user signed up\"}, {\"id\": \"insight analyzed\"}], **SHORT_DATE_RANGE,}, team=self.team\n        )\n    \n        FunnelCorrelation(filter, self.team).run()\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_correlations_by_events", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}, "benchmarks.QuerySuite.track_correlations_by_properties": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_correlations_by_properties(self):\n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"user signed up\"}, {\"id\": \"insight analyzed\"}],\n                **SHORT_DATE_RANGE,\n                \"funnel_correlation_type\": FunnelCorrelationType.PROPERTIES,\n                \"funnel_correlation_names\": [\"$browser\"],\n            },\n            team=self.team,\n        )\n        with no_materialized_columns():\n            FunnelCorrelation(filter, self.team).run()\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_correlations_by_properties", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}, "benchmarks.QuerySuite.track_correlations_by_properties_materialized": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_correlations_by_properties_materialized(self):\n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"user signed up\"}, {\"id\": \"insight analyzed\"}],\n                **SHORT_DATE_RANGE,\n                \"funnel_correlation_type\": FunnelCorrelationType.PROPERTIES,\n                \"funnel_correlation_names\": [\"$browser\"],\n            },\n            team=self.team,\n        )\n        FunnelCorrelation(filter, self.team).run()\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_correlations_by_properties_materialized", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}, "benchmarks.QuerySuite.track_trends_event_property_filter": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_event_property_filter(self):\n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"$pageview\"}],\n                \"properties\": [\n                    {\n                        \"key\": \"$host\",\n                        \"operator\": \"is_not\",\n                        \"value\": [\n                            \"localhost:8000\",\n                            \"localhost:5000\",\n                            \"127.0.0.1:8000\",\n                            \"127.0.0.1:3000\",\n                            \"localhost:3000\",\n                        ],\n                    }\n                ],\n                **SHORT_DATE_RANGE,\n            }\n        )\n    \n        with no_materialized_columns():\n            ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_trends_event_property_filter", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}, "benchmarks.QuerySuite.track_trends_event_property_filter_materialized": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_event_property_filter_materialized(self):\n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"$pageview\"}],\n                \"properties\": [\n                    {\n                        \"key\": \"$host\",\n                        \"operator\": \"is_not\",\n                        \"value\": [\n                            \"localhost:8000\",\n                            \"localhost:5000\",\n                            \"127.0.0.1:8000\",\n                            \"127.0.0.1:3000\",\n                            \"localhost:3000\",\n                        ],\n                    }\n                ],\n                **DATE_RANGE,\n            }\n        )\n        ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_trends_event_property_filter_materialized", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}, "benchmarks.QuerySuite.track_trends_filter_by_action_current_url": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_filter_by_action_current_url(self):\n        action = Action.objects.create(team=self.team, name=\"docs view\")\n        ActionStep.objects.create(\n            action=action, event=\"$pageview\", url=\"docs\", url_matching=\"contains\",\n        )\n    \n        filter = Filter(data={\"actions\": [{\"id\": action.id}], **DATE_RANGE}, team=self.team)\n        with no_materialized_columns():\n            ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_trends_filter_by_action_current_url", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}, "benchmarks.QuerySuite.track_trends_filter_by_action_current_url_materialized": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_filter_by_action_current_url_materialized(self):\n        action = Action.objects.create(team=self.team, name=\"docs view\")\n        ActionStep.objects.create(\n            action=action, event=\"$pageview\", url=\"docs\", url_matching=\"contains\",\n        )\n    \n        filter = Filter(data={\"actions\": [{\"id\": action.id}], **DATE_RANGE}, team=self.team)\n        ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_trends_filter_by_action_current_url_materialized", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}, "benchmarks.QuerySuite.track_trends_filter_by_action_with_person_filters": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_filter_by_action_with_person_filters(self):\n        action = Action.objects.create(team=self.team, name=\".com-users page views\")\n        ActionStep.objects.create(\n            action=action,\n            event=\"$pageview\",\n            properties=[{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}],\n        )\n    \n        filter = Filter(data={\"actions\": [{\"id\": action.id}], **DATE_RANGE}, team=self.team)\n        with no_materialized_columns():\n            ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_trends_filter_by_action_with_person_filters", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}, "benchmarks.QuerySuite.track_trends_filter_by_action_with_person_filters_materialized": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_filter_by_action_with_person_filters_materialized(self):\n        action = Action.objects.create(team=self.team, name=\".com-users page views\")\n        ActionStep.objects.create(\n            action=action,\n            event=\"$pageview\",\n            properties=[{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}],\n        )\n    \n        filter = Filter(data={\"actions\": [{\"id\": action.id}], **DATE_RANGE}, team=self.team)\n        ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_trends_filter_by_action_with_person_filters_materialized", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}, "benchmarks.QuerySuite.track_trends_filter_by_cohort": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_filter_by_cohort(self):\n        self.cohort.last_calculation = None\n        self.cohort.save()\n    \n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"$pageview\"}],\n                \"properties\": [{\"key\": \"id\", \"value\": self.cohort.pk, \"type\": \"cohort\"}],\n                **DATE_RANGE,\n            },\n            team=self.team,\n        )\n    \n        with no_materialized_columns():\n            ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_trends_filter_by_cohort", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}, "benchmarks.QuerySuite.track_trends_filter_by_cohort_materialized": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_filter_by_cohort_materialized(self):\n        self.cohort.last_calculation = None\n        self.cohort.save()\n    \n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"$pageview\"}],\n                \"properties\": [{\"key\": \"id\", \"value\": self.cohort.pk, \"type\": \"cohort\"}],\n                **DATE_RANGE,\n            },\n            team=self.team,\n        )\n    \n        ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_trends_filter_by_cohort_materialized", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}, "benchmarks.QuerySuite.track_trends_filter_by_cohort_precalculated": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_filter_by_cohort_precalculated(self):\n        self.cohort.last_calculation = now()\n        self.cohort.save()\n    \n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"$pageview\"}],\n                \"properties\": [{\"key\": \"id\", \"value\": self.cohort.pk, \"type\": \"cohort\"}],\n                **DATE_RANGE,\n            },\n            team=self.team,\n        )\n        ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_trends_filter_by_cohort_precalculated", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}, "benchmarks.QuerySuite.track_trends_no_filter": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_no_filter(self):\n        filter = Filter(data={\"events\": [{\"id\": \"$pageview\"}], **DATE_RANGE})\n        ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_trends_no_filter", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}, "benchmarks.QuerySuite.track_trends_person_property_filter": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_person_property_filter(self):\n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"$pageview\"}],\n                \"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}],\n                **DATE_RANGE,\n            }\n        )\n    \n        with no_materialized_columns():\n            ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_trends_person_property_filter", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}, "benchmarks.QuerySuite.track_trends_person_property_filter_materialized": {"code": "class QuerySuite:\n    @benchmark_clickhouse\n    def track_trends_person_property_filter_materialized(self):\n        filter = Filter(\n            data={\n                \"events\": [{\"id\": \"$pageview\"}],\n                \"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}],\n                **DATE_RANGE,\n            }\n        )\n    \n        ClickhouseTrends().run(filter, self.team)\n\n    def setup(self):\n        for table, property in MATERIALIZED_PROPERTIES:\n            if property not in get_materialized_columns(table):\n                materialize(table, property)\n                backfill_materialized_columns(table, [property], backfill_period=timedelta(days=1_000))\n    \n        # :TRICKY: Data in benchmark servers has ID=2\n        team = Team.objects.filter(id=2).first()\n        if team is None:\n            organization = Organization.objects.create()\n            team = Team.objects.create(id=2, organization=organization, name=\"The Bakery\")\n        self.team = team\n    \n        cohort = Cohort.objects.filter(name=\"benchmarking cohort\").first()\n        if cohort is None:\n            cohort = Cohort.objects.create(\n                team_id=2,\n                name=\"benchmarking cohort\",\n                groups=[{\"properties\": [{\"key\": \"email\", \"operator\": \"icontains\", \"value\": \".com\", \"type\": \"person\"}]}],\n            )\n            cohort.calculate_people_ch()\n        self.cohort = cohort", "name": "benchmarks.QuerySuite.track_trends_person_property_filter_materialized", "param_names": [], "params": [], "timeout": 3000.0, "type": "track", "unit": "unit", "version": "v001"}}, "machines": {"ci-benchmarks": {"machine": "ci-benchmarks", "version": 1}}, "tags": {"1.0.0": 363, "1.0.1": 369, "1.0.10": 701, "1.0.10.1": 710, "1.0.10.2": 735, "1.0.11": 818, "1.0.2": 371, "1.0.3": 384, "1.0.4": 386, "1.0.5": 389, "1.0.6": 397, "1.0.7": 487, "1.0.8": 543, "1.0.8.1": 546, "1.0.8.2": 581, "1.0.8.3": 586, "1.0.9": 656, "1.1.0": 871, "1.1.0.1": 876, "1.10.0": 1174, "1.10.1": 1179, "1.11.0": 1224, "1.12.0": 1262, "1.12.1": 1299, "1.13.0": 1316, "1.14.0": 1403, "1.15.0": 1587, "1.15.1": 1648, "1.16.0": 1801, "1.17.0": 1931, "1.18.0": 2072, "1.19.0": 2268, "1.2.0": 898, "1.20.0": 2411, "1.21.0": 2732, "1.21.0-beta": 2544, "1.22.0": 3004, "1.22.0-beta": 2946, "1.23.0": 3106, "1.23.1": 3129, "1.24.0": 3439, "1.25.0": 3878, "1.25.0-beta": 3818, "1.26.0": 4345, "1.27.0": 4878, "1.28.0": 5567, "1.28.1": 5705, "1.29.0": 6329, "1.29.1": 6465, "1.3.0": 930, "1.4.0": 952, "1.5.0": 973, "1.6.0": 1003, "1.7.0": 1039, "1.8.0": 1068, "1.9.0": 1127, "list": 529, "release-1.22.0-beta": 2946}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}